import os
import telebot
import requests
import threading
import time
import logging
import hashlib
import json
from datetime import datetime, timedelta
from flask import Flask
from fake_useragent import UserAgent
from ratelimit import limits, sleep_and_retry
import psycopg2
from urllib.parse import urlencode
import random

# ==================== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ====================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# ==================== FLASK –î–õ–Ø RENDER ====================
app = Flask(__name__)

@app.route('/')
def home():
    return "üü¢ EDL Bot - –†–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ! " + datetime.now().strftime("%Y-%m-%d %H:%M:%S")

@app.route('/health')
def health():
    return json.dumps({"status": "ok", "timestamp": datetime.now().isoformat()})

@app.route('/stats')
def stats():
    return json.dumps({
        "status": "running",
        "uptime": get_uptime(),
        "users_served": user_stats.get('total_users', 0),
        "questions_answered": user_stats.get('total_questions', 0)
    })

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
class Config:
    BOT_TOKEN = os.environ.get('BOT_TOKEN')
    DATABASE_URL = os.environ.get('DATABASE_URL', 'sqlite:///bot.db')
    ADMIN_ID = os.environ.get('ADMIN_ID', '')
    RENDER_URL = os.environ.get('RENDER_URL', 'https://your-bot.onrender.com')

# ==================== –°–ò–°–¢–ï–ú–ê –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø ====================
class CacheSystem:
    def __init__(self):
        self.cache = {}
        self.setup_database()
    
    def setup_database(self):
        """–ò—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL –Ω–∞ Render –∏–ª–∏ SQLite –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"""
        try:
            if Config.DATABASE_URL and Config.DATABASE_URL.startswith('postgres'):
                self.conn = psycopg2.connect(Config.DATABASE_URL, sslmode='require')
                self.cursor = self.conn.cursor()
                self.cursor.execute('''
                    CREATE TABLE IF NOT EXISTS cache (
                        id SERIAL PRIMARY KEY,
                        question_hash TEXT UNIQUE,
                        question TEXT,
                        answer TEXT,
                        created TIMESTAMP DEFAULT NOW()
                    )
                ''')
                self.conn.commit()
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞ PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
            else:
                raise Exception("No PostgreSQL, using memory cache")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏: {e}")
            self.conn = None
    
    def get(self, question):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∏–∑ –∫—ç—à–∞"""
        question_hash = hashlib.md5(question.encode()).hexdigest()
        
        if self.conn:
            try:
                self.cursor.execute(
                    'SELECT answer FROM cache WHERE question_hash = %s AND created > NOW() - INTERVAL %s',
                    (question_hash, '24 hours')
                )
                result = self.cursor.fetchone()
                if result:
                    return result[0]
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        if question_hash in self.cache:
            data = self.cache[question_hash]
            if datetime.now() - data['timestamp'] < timedelta(hours=24):
                return data['answer']
        
        return None
    
    def set(self, question, answer):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –∫—ç—à"""
        question_hash = hashlib.md5(question.encode()).hexdigest()
        
        if self.conn:
            try:
                self.cursor.execute(
                    'INSERT INTO cache (question_hash, question, answer) VALUES (%s, %s, %s) ON CONFLICT (question_hash) DO UPDATE SET answer = EXCLUDED.answer, created = NOW()',
                    (question_hash, question, answer)
                )
                self.conn.commit()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É: {e}")
        
        self.cache[question_hash] = {
            'answer': answer,
            'timestamp': datetime.now()
        }

# ==================== –°–ò–°–¢–ï–ú–ê –ó–ê–©–ò–¢–´ –û–¢ –°–ü–ê–ú–ê ====================
class AntiSpamSystem:
    def __init__(self):
        self.user_requests = {}
        self.cleanup_interval = 300
    
    def is_spam(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º"""
        now = time.time()
        user_id = str(user_id)
        
        if user_id in self.user_requests:
            self.user_requests[user_id] = [
                t for t in self.user_requests[user_id] 
                if now - t < 60
            ]
        
        if user_id not in self.user_requests:
            self.user_requests[user_id] = []
        
        self.user_requests[user_id].append(now)
        
        return len(self.user_requests[user_id]) > 10

# ==================== –°–ò–°–¢–ï–ú–ê –ó–ê–ü–†–û–°–û–í –ö –í–ù–ï–®–ù–ò–ú API ====================
class SmartRequestSystem:
    def __init__(self):
        self.ua = UserAgent()
        self.last_request_time = 0
    
    @sleep_and_retry
    @limits(calls=5, period=60)
    def smart_request(self, url):
        """–£–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏"""
        time_since_last = time.time() - self.last_request_time
        if time_since_last < 2:
            time.sleep(2 - time_since_last)
        
        headers = {
            'User-Agent': self.ua.random,
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
            'Connection': 'keep-alive',
        }
        
        try:
            self.last_request_time = time.time()
            response = requests.get(url, headers=headers, timeout=15)
            response.raise_for_status()
            return response
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {url}: {e}")
            return None

# ==================== –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ë–û–¢–ê ====================
class EDLBot:
    def __init__(self):
        if not Config.BOT_TOKEN:
            logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            raise ValueError("BOT_TOKEN required")
        
        self.bot = telebot.TeleBot(Config.BOT_TOKEN)
        self.cache = CacheSystem()
        self.antispam = AntiSpamSystem()
        self.requester = SmartRequestSystem()
        self.user_stats = {'total_users': 0, 'total_questions': 0}
        
        self.setup_handlers()
        logger.info("‚úÖ EDL Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def setup_handlers(self):
        @self.bot.message_handler(commands=['start', 'help'])
        @sleep_and_retry
        @limits(calls=10, period=60)
        def send_welcome(message):
            welcome_text = """
‚öñÔ∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EDL*

*–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –†–ë*

üë®‚Äçüíª *–°–æ–∑–¥–∞—Ç–µ–ª—å:* –°–æ–ª–æ–≤—å—ë–≤ –ù. –°.
üîê *–í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã* ¬© 2024

*üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/ask [–≤–æ–ø—Ä–æ—Å] - –∑–∞–¥–∞—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å
/laws - —Å–ø–∏—Å–æ–∫ –∫–æ–¥–µ–∫—Å–æ–≤ –†–ë  
/search [–∑–∞–ø—Ä–æ—Å] - –ø–æ–∏—Å–∫ –ø–æ –∑–∞–∫–æ–Ω–∞–º
/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

*üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ /ask –ú–æ–∂–Ω–æ –ª–∏ –∫—É—Ä–∏—Ç—å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ?
‚Ä¢ /ask –ö–æ–≥–¥–∞ –ø–æ–ª–æ–∂–µ–Ω –ø–µ—Ä–≤—ã–π –æ—Ç–ø—É—Å–∫?
‚Ä¢ /search –Ω–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–¥–µ–∫—Å
‚Ä¢ /ask –®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏

*üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã!*
            """
            self.safe_send_message(message.chat.id, welcome_text)
        
        @self.bot.message_handler(commands=['ask'])
        def handle_ask(message):
            if self.antispam.is_spam(message.from_user.id):
                self.safe_send_message(message.chat.id, "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1 –º–∏–Ω—É—Ç—É.")
                return
            
            question = message.text.replace('/ask', '').strip()
            if not question:
                self.safe_send_message(message.chat.id, "‚ùå –ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ /ask\n–ü—Ä–∏–º–µ—Ä: /ask –ú–æ–∂–Ω–æ –ª–∏ –∫—É—Ä–∏—Ç—å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ?")
                return
            
            self.safe_send_chat_action(message.chat.id, 'typing')
            answer = self.get_smart_answer(question)
            self.safe_send_message(message.chat.id, answer)
            
            self.user_stats['total_questions'] += 1
            if str(message.from_user.id) not in self.user_stats:
                self.user_stats['total_users'] += 1
        
        @self.bot.message_handler(commands=['search'])
        def handle_search(message):
            if self.antispam.is_spam(message.from_user.id):
                self.safe_send_message(message.chat.id, "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1 –º–∏–Ω—É—Ç—É.")
                return
            
            query = message.text.replace('/search', '').strip()
            if not query:
                self.safe_send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞\n–ü—Ä–∏–º–µ—Ä: /search —Ç—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å")
                return
            
            self.safe_send_chat_action(message.chat.id, 'typing')
            results = self.search_laws(query)
            self.safe_send_message(message.chat.id, results)
        
        @self.bot.message_handler(commands=['laws'])
        def show_laws(message):
            laws_text = """
üìö *–ö–æ–¥–µ–∫—Å—ã –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ë–µ–ª–∞—Ä—É—Å—å:*

‚Ä¢ *–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å* - –∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
‚Ä¢ *–¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å* - —Ç—Ä—É–¥–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
‚Ä¢ *–ù–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–¥–µ–∫—Å* - –Ω–∞–ª–æ–≥–∏ –∏ —Å–±–æ—Ä—ã
‚Ä¢ *–£–≥–æ–ª–æ–≤–Ω—ã–π –∫–æ–¥–µ–∫—Å* - –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è
‚Ä¢ *–ö–æ–ê–ü –†–ë* - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è  
‚Ä¢ *–ñ–∏–ª–∏—â–Ω—ã–π –∫–æ–¥–µ–∫—Å* - –∂–∏–ª–∏—â–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ *–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –∫–æ–¥–µ–∫—Å* - –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å
‚Ä¢ *–ö–æ–¥–µ–∫—Å –æ –±—Ä–∞–∫–µ –∏ —Å–µ–º—å–µ* - —Å–µ–º–µ–π–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è

üí° *–°–ø—Ä–æ—Å–∏—Ç–µ:* "–ß—Ç–æ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç —Ç—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å?"
            """
            self.safe_send_message(message.chat.id, laws_text)
        
        @self.bot.message_handler(commands=['status'])
        def show_status(message):
            status_text = f"""
üü¢ *–°–¢–ê–¢–£–°: EDL –ê–ö–¢–ò–í–ï–ù*

üìç *–•–æ—Å—Ç–∏–Ω–≥:* Render.com
üë®‚Äçüíª *–°–æ–∑–¥–∞—Ç–µ–ª—å:* –°–æ–ª–æ–≤—å—ë–≤ –ù. –°.
üîê *–ü—Ä–∞–≤–∞:* –∑–∞—â–∏—â–µ–Ω—ã ¬© 2024
üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* 0 —Ä—É–±–ª–µ–π
‚è±Ô∏è *–†–µ–∂–∏–º:* 24/7

üìä *–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:* {self.user_stats['total_questions']} –≤–æ–ø—Ä–æ—Å–æ–≤
üåê *–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:* 99.9%

*EDL - –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫!*
            """
            self.safe_send_message(message.chat.id, status_text)
        
        @self.bot.message_handler(commands=['stats'])
        def show_stats(message):
            stats_text = f"""
üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê EDL:*

üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {self.user_stats['total_users']}
‚ùì *–í–æ–ø—Ä–æ—Å–æ–≤:* {self.user_stats['total_questions']}
üíæ *–ö—ç—à:* {len(self.cache.cache)} –∑–∞–ø–∏—Å–µ–π
üïí *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* {get_uptime()}

üë®‚Äçüíª *–°–æ–∑–¥–∞—Ç–µ–ª—å:* –°–æ–ª–æ–≤—å—ë–≤ –ù. –°.
üîê *–í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã*
            """
            self.safe_send_message(message.chat.id, stats_text)
        
        @self.bot.message_handler(func=lambda message: True)
        def handle_all_messages(message):
            if len(message.text.strip()) < 3:
                return
            
            if self.antispam.is_spam(message.from_user.id):
                self.safe_send_message(message.chat.id, "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1 –º–∏–Ω—É—Ç—É.")
                return
            
            self.safe_send_chat_action(message.chat.id, 'typing')
            answer = self.get_smart_answer(message.text)
            self.safe_send_message(message.chat.id, answer)
            
            self.user_stats['total_questions'] += 1
            if str(message.from_user.id) not in self.user_stats:
                self.user_stats['total_users'] += 1
    
    def get_smart_answer(self, question):
        """–£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        cached = self.cache.get(question)
        if cached:
            logger.info(f"‚ö° –û—Ç–≤–µ—Ç –∏–∑ –∫—ç—à–∞: {question[:50]}...")
            return cached
        
        answer = self.analyze_question(question)
        self.cache.set(question, answer)
        
        return answer
    
    def analyze_question(self, question):
        """–ê–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–∞ —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
        question_lower = question.lower()
        
        knowledge_base = {
            '–∫—É—Ä–µ–Ω–∏–µ': self.get_smoking_law,
            '–æ—Ç–ø—É—Å–∫': self.get_vacation_law,
            '–Ω–∞–ª–æ–≥': self.get_tax_law,
            '–∞–ª–∫–æ–≥–æ–ª—å': self.get_alcohol_law,
            '—Å–∫–æ—Ä–æ—Å—Ç—å': self.get_speed_law,
            '—Ä–∞–∑–≤–æ–¥': self.get_divorce_law,
            '–∞—Ä–µ–Ω–¥–∞': self.get_rent_law,
            '—Ç—Ä—É–¥': self.get_labor_law,
            '—à—Ç—Ä–∞—Ñ': self.get_fine_law,
            '–ø—Ä–∞–≤–∞': self.get_rights_law
        }
        
        for keyword, answer_func in knowledge_base.items():
            if keyword in question_lower:
                return answer_func()
        
        return self.intelligent_search_with_fallback(question)
    
    def intelligent_search_with_fallback(self, question):
        """–£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ —Ä–µ–∑–µ—Ä–≤–∞"""
        try:
            pravo_result = self.search_pravo_safe(question)
            if pravo_result:
                return pravo_result
            
            myfin_result = self.search_myfin_safe(question)
            if myfin_result:
                return myfin_result
            
            return self.get_general_advice(question)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return self.get_emergency_response(question)
    
    def search_pravo_safe(self, query):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–∞ Pravo.by"""
        try:
            encoded_query = requests.utils.quote(query)
            url = f"https://pravo.by/search/?query={encoded_query}"
            
            response = self.requester.smart_request(url)
            if response and response.status_code == 200:
                return f"""
üîç *–ù–∞–π–¥–µ–Ω–æ –Ω–∞ Pravo.by –ø–æ –∑–∞–ø—Ä–æ—Å—É:* "{query}"

üìñ *–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫:* [Pravo.by]({url})

üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
‚Ä¢ –ò–∑—É—á–∏—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –¥–∞—Ç—ã –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Å–∏–ª—É
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

‚öñÔ∏è *EDL - –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö*
                """
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Pravo.by –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        return None
    
    def search_myfin_safe(self, query):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–∞ MyFin.by"""
        try:
            encoded_query = requests.utils.quote(query)
            url = f"https://myfin.by/zakony/search?q={encoded_query}"
            
            response = self.requester.smart_request(url)
            if response and response.status_code == 200:
                return f"""
üìä *–ù–∞–π–¥–µ–Ω–æ –Ω–∞ MyFin.by –ø–æ –∑–∞–ø—Ä–æ—Å—É:* "{query}"

üìà *–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:* [MyFin –ó–∞–∫–æ–Ω—ã]({url})

üíé *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*
‚Ä¢ –°–≤–µ–∂–∏–µ –ø–æ–ø—Ä–∞–≤–∫–∏ –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ
‚Ä¢ –ü—Ä–æ—Å—Ç—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –Ω–æ—Ä–º
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏

üîç *–¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:* [Pravo.by](https://pravo.by) –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤

*EDL - —Å–æ–∑–¥–∞–Ω –°–æ–ª–æ–≤—å—ë–≤—ã–º –ù. –°., –≤—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã*
                """
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è MyFin.by –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        return None
    
    def search_laws(self, query):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É"""
        pravo_url = f"https://pravo.by/search/?query={requests.utils.quote(query)}"
        myfin_url = f"https://myfin.by/zakony/search?q={requests.utils.quote(query)}"
        
        return f"""
üîç *–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫:* "{query}"

üìö *–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:*
‚Ä¢ [Pravo.by - —ç—Ç–∞–ª–æ–Ω–Ω–∞—è –±–∞–∑–∞]({pravo_url})
‚Ä¢ [MyFin.by - –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è]({myfin_url})

üéØ *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:*
‚Ä¢ –ù–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–¥–µ–∫—Å
‚Ä¢ –¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä  
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è
‚Ä¢ –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞

üë®‚Äçüíª *–°–æ–∑–¥–∞—Ç–µ–ª—å:* –°–æ–ª–æ–≤—å—ë–≤ –ù. –°.
üîê *–í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã*
"""
    
    def get_general_advice(self, question):
        """–û–±—â–∏–π —Å–æ–≤–µ—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
        return f"""
‚ùì *–í–æ–ø—Ä–æ—Å:* "{question}"

ü§î *–î–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —É—Ç–æ—á–Ω–∏—Ç–µ:*

üìç *–ú–µ—Å—Ç–æ:* –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–∏—Ç—É–∞—Ü–∏—è?
‚è∞ *–í—Ä–µ–º—è:* –∫–æ–≥–¥–∞ –≤–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å?
üë• *–£—á–∞—Å—Ç–Ω–∏–∫–∏:* –∫—Ç–æ –≤–æ–≤–ª–µ—á–µ–Ω?
üíº *–û–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞:* –∫–∞–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –≤–∞–∂–Ω—ã?

üí° *–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ "–ö–∞–∫–∞—è —Å—Ç–∞—Ç—å—è –ö–æ–ê–ü –†–ë –∑–∞ –∫—É—Ä–µ–Ω–∏–µ –≤ –ø–æ–¥—ä–µ–∑–¥–µ?"
‚Ä¢ "–ö–æ–≥–¥–∞ –ø–æ–ª–æ–∂–µ–Ω –ø–µ—Ä–≤—ã–π –æ—Ç–ø—É—Å–∫ –ø–æ –¢—Ä—É–¥–æ–≤–æ–º—É –∫–æ–¥–µ–∫—Å—É?"
‚Ä¢ "–®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –Ω–∞ 20 –∫–º/—á –≤ –≥–æ—Ä–æ–¥–µ"

üåê *–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ:*
[Pravo.by](https://pravo.by) - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –∑–∞–∫–æ–Ω–æ–≤

üë®‚Äçüíª *EDL —Å–æ–∑–¥–∞–Ω –°–æ–ª–æ–≤—å—ë–≤—ã–º –ù. –°.*
üîê *–í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã ¬© 2024*
"""
    
    def get_emergency_response(self, question):
        """–ê–≤–∞—Ä–∏–π–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–ª–Ω–æ–º —Å–±–æ–µ"""
        return f"""
‚ö†Ô∏è *–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏*

–í–∞—à –≤–æ–ø—Ä–æ—Å: "{question}"
–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.

üîÑ *–ß—Ç–æ –¥–µ–ª–∞—Ç—å:*
1. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /search –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–∏—Å–∫–∞
3. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º

üë®‚Äçüíª *–°–æ–∑–¥–∞—Ç–µ–ª—å:* –°–æ–ª–æ–≤—å—ë–≤ –ù. –°.
üîê *–í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã*

*EDL —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω–µ—Ç—Å—è –∫ —Ä–∞–±–æ—Ç–µ!*
"""
    
    def get_smoking_law(self):
        return """
üö≠ *–ö—É—Ä–µ–Ω–∏–µ –≤ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö*

üìã *–ó–∞–ø—Ä–µ—â–µ–Ω–æ:*
‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
‚Ä¢ –ü–æ–¥—ä–µ–∑–¥—ã, –ª–∏—Ñ—Ç—ã, –ª–µ—Å—Ç–Ω–∏—á–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
‚Ä¢ –î–µ—Ç—Å–∫–∏–µ –ø–ª–æ—â–∞–¥–∫–∏, —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ —à–∫–æ–ª –∏ –±–æ–ª—å–Ω–∏—Ü
‚Ä¢ –†–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞ –≤ –ø–æ–º–µ—â–µ–Ω–∏—è—Ö

‚öñÔ∏è *–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å:*
‚Ä¢ *–°—Ç–∞—Ç—å—è 18.16 –ö–æ–ê–ü –†–ë*
‚Ä¢ –®—Ç—Ä–∞—Ñ: –æ—Ç 0.5 –¥–æ 4 –±–∞–∑–æ–≤—ã—Ö –≤–µ–ª–∏—á–∏–Ω

üí° *–†–∞–∑—Ä–µ—à–µ–Ω–æ:* –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö

üë®‚Äçüíª *–°–æ–∑–¥–∞—Ç–µ–ª—å EDL:* –°–æ–ª–æ–≤—å—ë–≤ –ù. –°.
üîê *–í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã*
"""
    
    def get_vacation_law(self):
        return """
üèñÔ∏è *–¢—Ä—É–¥–æ–≤–æ–π –æ—Ç–ø—É—Å–∫ –≤ –†–ë*

üìã *–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è:*
‚Ä¢ –ú–∏–Ω–∏–º—É–º 24 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω—è (*—Å—Ç. 150 –¢–ö –†–ë*)
‚Ä¢ –ü—Ä–∞–≤–æ –Ω–∞ –æ—Ç–ø—É—Å–∫ –ø–æ—Å–ª–µ 6 –º–µ—Å—è—Ü–µ–≤ —Ä–∞–±–æ—Ç—ã (*—Å—Ç. 154 –¢–ö –†–ë*)
‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –æ—Ç–ø—É—Å–∫–∞ - –Ω–µ –º–µ–Ω–µ–µ 14 –¥–Ω–µ–π

üí∞ *–û–ø–ª–∞—Ç–∞:*
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ 12 –º–µ—Å—è—Ü–µ–≤
‚Ä¢ –í—ã–ø–ª–∞—Ç–∞ –∑–∞ 2 –¥–Ω—è –¥–æ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞

üë®‚Äçüíª *–°–æ–∑–¥–∞—Ç–µ–ª—å EDL:* –°–æ–ª–æ–≤—å—ë–≤ –ù. –°.
üîê *–í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã*
"""
    
    def safe_send_message(self, chat_id, text):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            self.bot.send_message(chat_id, text, parse_mode='Markdown', disable_web_page_preview=True)
        except telebot.apihelper.ApiException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            try:
                clean_text = text.replace('*', '').replace('_', '').replace('`', '')
                self.bot.send_message(chat_id, clean_text)
            except:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
    
    def safe_send_chat_action(self, chat_id, action):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —á–∞—Ç–∞"""
        try:
            self.bot.send_chat_action(chat_id, action)
        except:
            pass

# ==================== –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ò Keep-Alive ====================
start_time = time.time()
user_stats = {'total_users': 0, 'total_questions': 0}

def get_uptime():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    uptime = time.time() - start_time
    hours = int(uptime // 3600)
    minutes = int((uptime % 3600) // 60)
    return f"{hours}—á {minutes}–º"

def keep_alive_worker():
    """–†–∞–±–æ—á–∏–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    while True:
        try:
            requests.get(f"{Config.RENDER_URL}/health", timeout=10)
            logger.info(f"‚úÖ Keep-alive: {get_uptime()}")
            
            if hasattr(keep_alive_worker, 'last_cleanup'):
                if time.time() - keep_alive_worker.last_cleanup > 600:
                    logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏...")
                    keep_alive_worker.last_cleanup = time.time()
            else:
                keep_alive_worker.last_cleanup = time.time()
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Keep-alive –æ—à–∏–±–∫–∞: {e}")
        
        time.sleep(300)

def run_bot_supervisor():
    """–°—É–ø–µ—Ä–≤–∏–∑–æ—Ä –±–æ—Ç–∞ —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º"""
    while True:
        try:
            logger.info("üü¢ –ó–∞–ø—É—Å–∫–∞–µ–º EDL Bot...")
            bot_instance = EDLBot()
            bot_instance.bot.polling(none_stop=True, timeout=90, long_polling_timeout=90)
            
        except Exception as e:
            logger.error(f"üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
            time.sleep(30)

# ==================== –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ ====================
if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ EDL Bot System...")
    
    keep_alive_thread = threading.Thread(target=keep_alive_worker, daemon=True)
    keep_alive_thread.start()
    logger.info("‚úÖ Keep-alive —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    
    bot_thread = threading.Thread(target=run_bot_supervisor, daemon=True)
    bot_thread.start()
    logger.info("‚úÖ –°—É–ø–µ—Ä–≤–∏–∑–æ—Ä –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω")
    
    logger.info("‚úÖ Flask app –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É 5000")
    app.run(host='0.0.0.0', port=5000, debug=False, use_reloader=False)